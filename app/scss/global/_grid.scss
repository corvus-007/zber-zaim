@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - 1px, null);
}

@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin make-container($gutter: $grid-gutter-width) {
  min-width: (320px - $gutter);
  margin-left: auto;
  margin-right: auto;
  padding-left: ($gutter / 2);
  padding-right: ($gutter / 2);

  @each $breakpoint, $container-max-width in $grid-max-widths {
    @include media-breakpoint-up($breakpoint) {
      max-width: $container-max-width;
    }
  }
}

@mixin make-slim-container($gutter: $grid-gutter-width) {
  min-width: (320px - $gutter);
  margin-left: auto;
  margin-right: auto;
  padding-left: ($gutter / 2);
  padding-right: ($gutter / 2);

  @each $breakpoint, $container-max-width in $grid-max-widths--slim {
    @include media-breakpoint-up($breakpoint) {
      max-width: $container-max-width;
    }
  }
}

@mixin make-fat-container($gutter: $grid-gutter-width) {
  min-width: (320px - $gutter);
  margin-left: auto;
  margin-right: auto;
  padding-left: ($gutter / 2);
  padding-right: ($gutter / 2);

  @each $breakpoint, $container-max-width in $grid-max-widths--fat {
    @include media-breakpoint-up($breakpoint) {
      max-width: $container-max-width;
    }
  }
}

@mixin make-container-fluid($gutter: $grid-gutter-width) {
  // width: 100%;
  padding-left: ($gutter / 2);
  padding-right: ($gutter / 2);
}

@mixin make-row($gutter: $grid-gutter-width) {
  display: flex;
  flex-wrap: wrap;
  margin-left: ($gutter / -2);
  margin-right: ($gutter / -2);
}

@mixin make-col($size, $columns: $grid-columns, $gutter: $grid-gutter-width) {
  width: percentage($size / $columns);
  padding-left: ($gutter / 2);
  padding-right: ($gutter / 2);
  box-sizing: border-box;
}

// @mixin make-col-offset($size, $columns: $grid-columns) {
//   margin-left: percentage($size / $columns);
// }

@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {

  %grid-column {
    position: relative;
    width: 100%;
    min-height: 1px;
    padding-left: ($gutter / 2);
    padding-right: ($gutter / 2);
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    @for $i from 1 through $columns {
      .col#{$infix}-#{$i} {
        @extend %grid-column;
      }
    }

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      @for $i from 1 through $columns {
        .col#{$infix}-#{$i} {
          @include make-col($i);
        }
      }
    }
  }
}

// @include make-grid-columns();

// .row {
//   @include make-row();
// }
